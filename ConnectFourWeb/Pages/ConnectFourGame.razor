@page "/game/{gameId}"

@using ConnectFourLibrary
@using ConnectFourWeb.Data
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text.Json.Serialization
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Game Page</PageTitle>

<h1>Connect Four</h1>

<h2>How to Play:</h2>
<ol>
    <li>Player 1 will be <span style="color: red">red</span>, and Player 2 will be <span style="color: yellow;">yellow</span>.</li>
    <li>Players will alternate taking turns by putting their tokens on the board. Put your token in the board by clicking the column where you want to place it.</li>
    <li>The first player to connect four tokens in a row wins. The four in a row can be horizontal, vertical, or diagonal.</li>
</ol>

@{
    if (gameManager != null)
    {
        if (gameEnded)
        {
            int maxPossibleMoves = gameManager.MaxPossibleMoves;
            bool isTie = gameManager.MaxPossibleMoves == 0;

            <div>
                @if (isTie)
                {
                    <p>It's a tie!</p>
                }
                else
                {
                    <h3>@gameManager.PlayerTurn.PlayerColour wins!</h3>
                }
            </div>

            <div class="column">
                 @for (int i = 0; i < 6; i++)
                 {
                    <div class="board">
                        @for (int j = 0; j < 7; j++)
                        {
                            <div class="gamepiece @gameManager.Board.PlayingBoard[i, j].color.ToString().ToLower()"></div>
                        }
                    </div>
                 }
            </div>
        }
        else if (illegalMove == true && gameManager.PlayerTurn.PlayerId == playerId)
        {
            illegalMove = false;
            if (@gameManager.PlayerTurn.PlayerId == playerId)
            {
                <h3>@gameManager.PlayerTurn.PlayerColour's Turn!</h3>
            }
            <h3><span style="color: purple">Illegal move, please select a column that isn't full!</span></h3>
            <div class="column">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="board">
                        @for (int j = 0; j < 7; j++)
                        {
                            int columnIndex = j;

                            <div class="gamepiece @gameManager.Board.PlayingBoard[i, j].color.ToString().ToLower()" @onclick="@(() => PieceClicked(columnIndex))"></div>
                        }
                    </div>
                }
            </div>
        }
        else if (gameManager.PlayerTurn.PlayerId == playerId)
        {
            <h3>Your Turn! You are playing with @gameManager.PlayerTurn.PlayerColour!</h3>
            <div class="column">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="board">
                        @for (int j = 0; j < 7; j++)
                        {
                            int columnIndex = j;

                            <div class="gamepiece @gameManager.Board.PlayingBoard[i, j].color.ToString().ToLower()" @onclick="@(() => PieceClicked(columnIndex))"></div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <h3>It's not your turn, please wait for your turn</h3>
            <div class="column">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="board">
                        @for (int j = 0; j < 7; j++)
                        {
                            <div class="gamepiece @gameManager.Board.PlayingBoard[i, j].color.ToString().ToLower()"></div>
                        }
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p>Loading...</p>
    }
}

@code {
    [Parameter]
    public string? gameId { get; set; }

    private HubConnection? hubConnection;
    private IGame gameManager;
    private bool gameEnded = false;
    private bool illegalMove = false;
    private string? playerId;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("GameHub"))
            .WithAutomaticReconnect()
            .Build();

        gameManager = GameService.GetGameManagerById(gameId);

        hubConnection.On<string>("SetPlayerOne", (socketId) =>
        {
            gameManager.PlayerOne.PlayerId = socketId;
            gameManager.PlayerOne.PlayerColour = TokenColour.Red;
            playerId = gameManager.PlayerOne.PlayerId;
            gameManager.PlayerTurn = gameManager.PlayerOne;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("SetPlayerTwo", (socketId) =>
        {
            gameManager.PlayerTwo.PlayerId = socketId;
            gameManager.PlayerTwo.PlayerColour = TokenColour.Yellow;
            playerId = gameManager.PlayerTwo.PlayerId;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On("GameEnded", () => {
            gameEnded = true;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On("ReceiveMove", () => InvokeAsync(StateHasChanged));

        await hubConnection.StartAsync();

        await hubConnection.InvokeAsync("AddUserToGroup", gameId);
        await hubConnection.InvokeAsync("SetPlayers", gameId);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task PieceClicked(int col)
    {
        try
        {
            var moveData = new MoveData(col, gameId);
            await hubConnection.InvokeAsync("MakeMove", moveData);
        }
        catch (InvalidOperationException ex)
        {
            illegalMove = true;
        }
        catch
        {
            
        }
    }
}
