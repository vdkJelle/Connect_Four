@page "/game/{id}"

@using ConnectFourLibrary
@using ConnectFourWeb.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Game Page</PageTitle>

<h1>Connect Four</h1>

<h2>How to Play:</h2>
<ol>
    <li>Player 1 will be <span style="color: red">red</span>, and Player 2 will be <span style="color: yellow;">yellow</span>.</li>
    <li>Players will alternate taking turns by putting their tokens on the board. Put your token in the board by clicking the column where you want to place it.</li>
    <li>The first player to connect four tokens in a row wins. The four in a row can be horizontal, vertical, or diagonal.</li>
</ol>

<h3>@gameManager.PlayerTurn's Turn!</h3>

@if (gameManager != null)
{
    <div class="column">
        @for (int i = 0; i < 6; i++)
        {
            <div class="board">
                @for (int j = 0; j < 7; j++)
                {
                    int columnIndex = j;

                    <div class="gamepiece
                        @gameManager.Board.PlayingBoard[i, j].color.ToString().ToLower()" @onclick="@(() => PieceClicked(columnIndex))"></div>
                }
            </div>
        }
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private HubConnection? hubConnection;
    private IGame gameManager;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("GameHub"))
            .WithAutomaticReconnect()
            .Build();

        gameManager = GameService.GetGameManagerById(Id);

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void PieceClicked(int col)
    {
        gameManager.RegisterMoveToBoard(col);
        gameManager.SwapPlayerTurns();
    }
}
