@page "/matchmaking"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<PageTitle>Matchmaking</PageTitle>

<h1>Matchmaking</h1>
<AuthorizeView>
    <Authorized>
        <button class="btn btn-primary" @onclick="() => InitiateMatchmaking()" disabled="@(!IsConnected)">Search for Game!</button>
        @if (queued)
        {
            <div>
                <h3>Queued for game, please wait for another player to join the queue.</h3>
            </div>
        }
        @if (queue_duplicate)
        {
            <div>
                <h3>You can not play against yourself.</h3>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <a href="/Identity/Account/Login">Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HubConnection? hubConnection;
    private bool queued = false;
    private bool queue_duplicate = false;

    protected override async Task OnInitializedAsync()
    {
        IHttpContextAccessor httpContextAccessor = new HttpContextAccessor();
        string jwtToken = httpContextAccessor.HttpContext.Request.Cookies["jwtToken"];

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("MatchmakingHub"), options =>
            {
                options.Headers.Add("Authorization", "Bearer " + jwtToken);
                options.UseDefaultCredentials = true;
                options.AccessTokenProvider = () => Task.FromResult("Bearer " + jwtToken);
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("InitiateMatch", (url) => NavigateToGamePage(url));
        hubConnection.On("Queued", () => 
        {
            queued = true;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On("Queue_Duplicate", () =>
        {
            queue_duplicate = true;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void NavigateToGamePage(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private async void InitiateMatchmaking()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("InitiateMatchmaking");
        }
    }
}
